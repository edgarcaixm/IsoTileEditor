package {		// stage instances:	// libraryIDStr:TextInput (component)	// tileIDStr:TextInput (component)	// rowInt:NumericStepper (component)	// colInt:NumericStepper (component)	// newTileBtn:Button (component)		import flash.ui.*;	import flash.display.*;	import flash.events.*;	import flash.external.ExternalInterface;	import adobe.utils.MMExecute; 	import flash.utils.Timer;		public class TileEditor extends MovieClip {				private var _libraryID:String;		private var _docID:String;		private var _currentDoc:String = null;		private var _currentSelection:String = null;				private var _timer:Timer;				public function TileEditor() {			// library			libraryIDStr.addEventListener(Event.CHANGE, onTextChange);			libraryIDStr.addEventListener(KeyboardEvent.KEY_UP, onLibraryIDUpdate);			newLibraryBtn.addEventListener(MouseEvent.CLICK, onNewLibrary);			exportBtn.addEventListener(MouseEvent.CLICK, onExportLibrary);			// tile			tileIDStr.addEventListener(Event.CHANGE, onTextChange);			tileIDStr.addEventListener(KeyboardEvent.KEY_UP, onTileIDChanged);			rowInt.addEventListener(Event.CHANGE, onStepperChanged);			colInt.addEventListener(Event.CHANGE, onStepperChanged);			newTileBtn.addEventListener(MouseEvent.CLICK, onCreateNewTile);						addEventListener(Event.ADDED_TO_STAGE, init);		}				private function init(e:Event):void {			stage.align = StageAlign.TOP_LEFT;			_libraryID = (MMexe("getLibraryName") == "0") ? "" : MMexe("getLibraryName");			libraryIDStr.text = _libraryID;			onTextChange(null);			// init stage instance selection monitor			_timer = new Timer(500);			_timer.removeEventListener(TimerEvent.TIMER, monitorSelection);			_timer.addEventListener(TimerEvent.TIMER, monitorSelection);			_timer.start();			// init doc monitor event (jsfl event)			//MMExecute("fl.runScript(fl.configURI + 'WindowSWF/events.jsfl');");			//ExternalInterface.addCallback("docChanged", updateDoc);			_docID = MMExecute("fl.runScript(fl.configURI + 'WindowSWF/stage_monitor.jsfl', 'getDocID');");			_currentDoc = _docID;						removeEventListener(Event.ADDED_TO_STAGE, init);		}				private function updateDoc():void {			_libraryID = (MMexe("getLibraryName") == "0") ? "" : MMexe("getLibraryName");			libraryIDStr.text = _libraryID;			if (_libraryID == "") {				// disable UI elements				libraryIDStr.enabled = false;				exportBtn.enabled = false;				tileIDStr.enabled = false;				newTileBtn.enabled = false;				rowInt.enabled = false;				colInt.enabled = false;			} else {				// enable UI elements				libraryIDStr.enabled = true;				exportBtn.enabled = true;				tileIDStr.enabled = true;				newTileBtn.enabled = true;				rowInt.enabled = true;				colInt.enabled = true;			}					}				private function onNewLibrary(e:Event):void {					}		private function onExportLibrary(e:Event):void {			MMexe("exportLibrary");		}				private function monitorSelection(e:TimerEvent):void {			// monitors the stage for instance selection			// by querying jsfl since there's no native event			// returns: tileID, rows, cols			var props:Array = MMExecute("fl.runScript(fl.configURI + 'WindowSWF/stage_monitor.jsfl', 'getSelectionProps');").split(",");			if (props && props[0] != _currentSelection) {				_currentSelection = props[0];				tileIDStr.text = props[0];				rowInt.value = Number(props[1]);				colInt.value = Number(props[2]);				onTextChange(null);			}			// check for current document focus			var tDoc:String = MMExecute("fl.runScript(fl.configURI + 'WindowSWF/stage_monitor.jsfl', 'getDocID');");			if (tDoc != _currentDoc) {				_currentDoc = tDoc;				updateDoc();			}		}					private function onTextChange(e:Event=null):void {			if (tileIDStr.text != "" && libraryIDStr.text != "") {				newTileBtn.enabled = true;			} else {				newTileBtn.enabled = false;			}		}				private function onCreateNewTile(e:MouseEvent):void {			var tileID:String = tileIDStr.text;			var rowValue:int = rowInt.value;			var colValue:int = colInt.value;			MMexe("onCreateNewTile", tileID, rowValue, colValue);		}				private function onTileIDChanged(e:KeyboardEvent):void {			if (e.keyCode == Keyboard.ENTER) {				MMexe("updateTileID", tileIDStr.text);			}		}		private function onStepperChanged(e:Event):void {			MMexe("updateTileValues", rowInt.value, colInt.value);		}				private function onLibraryIDUpdate(e:KeyboardEvent):void {			if (e.keyCode == Keyboard.ENTER) {				MMexe("setLibraryName", libraryIDStr.text);			}		}				// utility for calling MMExecute functions		private function MMexe(funcStr:String, ... rest):String {			// build arguments string if needed			var args:String = (rest.length > 0) ? (",'"+rest.join("','")+"'") : "";			return MMExecute("fl.runScript(fl.configURI + 'WindowSWF/tileeditor.jsfl', '"+funcStr+"'"+args+");");		}	}}